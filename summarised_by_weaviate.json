{
    "data": {
        "Get": {
            "Nodes": [
                {
                    "_additional": {
                        "summary": [
                            {
                                "property": "text_content",
                                "result": "TruCol is a smart contract with a bounty for deterministically verifiable development tasks. Developers from all over the world are able to complete these tasks and get rewarded automatically when the requirement of the smart contract is fulfilled. The protocol thus removes the middleman and costly fees, and stimulates an open and fair development market."
                            }
                        ]
                    },
                    "text_content": "A concise overview of the TruCol protocol.\nThe TruCol protocol presents an improvement of market efficiency and developer autonomy by decentralisation and automation of test-driven development. The protocol promotes inclusive, fair and accessible work, by\nenabling developers to participate in the market regardless of their circumstances. Employers publish a smart contract with a bounty for deterministically verifiable development tasks which are fit for solving by external parties. Developers from all over the world are able to complete these tasks and get rewarded automatically when the requirement of the smart contract is fulfilled. The protocol thus removes the middleman and costly fees, and stimulates an open and fair development market.\nTraditional bounty-based platforms require a modicum of trust and an often costly middle-person. For the market of deterministically verifiable test-driven development tasks, decentralisation eliminates the necessity for trust and a costly platform that mediates the collaboration. This reduces the transaction costs of such tasks. Additionally, it enables anyone in the world to participate, as long as they have access to the test specifications.\nThis means hiring bias is eliminated for these tasks, and the thresholds to getting work are reduced. To illustrate, the traditional solution requires companies to do some promotion to attract intelligence that is able to solve\ntheir tasks. Next, an employee has to apply. Then the employer needs to filter the applications to find a suitable candidate. If a match is made, the two can reach a work agreement. They then have to trust each other to live up to their promises and disputes can be settled through law and regulation. All these activities can be omitted when using the TruCol protocol for deterministically verifiable tasks, such algorithmic optimisations of heuristics of NP-hard problems and applications of artificial intelligence.\nBy providing a protocol instead of a service, we empower the users financially whilst increasing their autonomy by removing the need to rely on an over-arching bounty platform that takes money from the work of users. Sharing a completely open and deterministic payout protocol removes bias from the hiring process. We believe the early-adopters on the employer side of the protocol can gain knowledge and experience that may give them a tactical advantage in the domain of requirement specification for AI engines like GPT-3. It can be difficult to identify which development processes in a company are suitable to offload into the TruCol protocol. It can be difficult to write air-tight test specifications in sponsor contracts. We intend to work as a consultancy to assist companies in successfully navigating these challenges to help them get the most out of the TruCol protocol.\nThe protocol can be implemented on smart contracts of various chains, such as Ethereum. The employer can determine their desired level of decentralization by choosing whether they want to publish the test specification completely decentralized on-chain, or make use of GitHub, continuous integration and oracles to verify the completion of the task.\nWe are intending on submitting our whitepaper to a scientific peer reviewed conference. If you would like to pre-read the whitepaper, please contact us and we\u2019ll email you the pdf.\nCurrently, we have a MWE of the TruCol protocol in Solidity-Solidity format using Chainlinks verifiable random function to prevent hardcoding. Our biggest bottleneck right now is in automatically deploying a self-hosting docker/virtualmachine (instead of shell) GitLab CI. If you happen to have some bash skills, feel free to improve our GitLab-CI deployment script.\nAbout\u00a0\u00a0\u00a0\u00a0 Contact\u00a0\u00a0\u00a0\u00a0 GitHub\u00a0\u00a0\u00a0\u00a0\n\u00a9 2023. A TruCol project. CC BY-SA 4.0.\n"
                },
                {
                    "_additional": {
                        "summary": [
                            {
                                "property": "text_content",
                                "result": "TruCol is a decentralised collaboration protocol for test-driven development. TruCol promotes inclusive, fair and accessible work. The TruCol protocol presents an improvement of market efficiency and developer autonomy by decentralisation of test- driven development. Would you like to know how you can use TruCol, check out the Usecases page to see whether TruCol is what you need!"
                            }
                        ]
                    },
                    "text_content": "TruCol is a decentralised collaboration protocol for test-driven development, which promotes inclusive, fair and accessible work.\nUsecases\nThe TruCol protocol presents an improvement of market efficiency and developer autonomy by decentralisation of test-driven development.\nWould you like to learn more about the TruCol protocol, please see the documentation on the  TruCol Protocol page.\nWould you like to know how you can use TruCol, check out the Usecases page to see whether TruCol is what you need!\nAbout\u00a0\u00a0\u00a0\u00a0 Contact\u00a0\u00a0\u00a0\u00a0 GitHub\u00a0\u00a0\u00a0\u00a0\n\u00a9 2023. A TruCol project. CC BY-SA 4.0.\n"
                },
                {
                    "_additional": {
                        "summary": [
                            {
                                "property": "text_content",
                                "result": "TruCol is a decentralised collaboration protocol for test-driven development. TruCol promotes inclusive, fair and accessible work. The TruCol protocol presents an improvement of market efficiency and developer autonomy by decentralisation of test- driven development. Would you like to know how you can use TruCol, check out the Usecases page to see whether TruCol is what you need!"
                            }
                        ]
                    },
                    "text_content": "TruCol is a decentralised collaboration protocol for test-driven development, which promotes inclusive, fair and accessible work.\nUsecases\nThe TruCol protocol presents an improvement of market efficiency and developer autonomy by decentralisation of test-driven development.\nWould you like to learn more about the TruCol protocol, please see the documentation on the  TruCol Protocol page.\nWould you like to know how you can use TruCol, check out the Usecases page to see whether TruCol is what you need!\nAbout\u00a0\u00a0\u00a0\u00a0 Contact\u00a0\u00a0\u00a0\u00a0 GitHub\u00a0\u00a0\u00a0\u00a0\n\u00a9 2023. A TruCol project. CC BY-SA 4.0.\n"
                },
                {
                    "_additional": {
                        "summary": [
                            {
                                "property": "text_content",
                                "result": "TruCol is a decentralised smart-contract protocol. Bounty hunters can find and code a solution to a well-defined challenge. The first person to submit a valid solution retrieves the full bounty. Employers can specify an expiration date on their bounty, and the bounty contracts are immutable after deployment."
                            }
                        ]
                    },
                    "text_content": "Find out how you can use TruCol\nSuppose Alice wants some well-defined challenge, such as an n*n sudoku, to be solved. She writes a set of unit tests that check any given solution, using random inputs. Instead of creating the solution herself, Alice publishes the unit tests in a smart contract and sets a bounty for any other smart contract that solves it. Bob, the bounty hunter, finds the contract and codes a solution in a smart contract, in order to receive the bounty. If Alice\u2019s requirements are fulfilled, the smart contract automatically pays out the reward. This repository presents the protocol to do this completely trustless and decentralised, without taking any fees, thus increasing market efficiency.\n\nYou can off-load all your programming tasks that are automatically and deterministically verifiable into the TruCol protocol. This guarantees you get the lowest labour cost around the world. Furthermore, it eliminates the need of HR for these tasks.\nThis is one of the weaknesses of the TruCol protocol, we currently cannot guarantee high quality code solutions. To mitigate this, we recommend you enforce pre-commit like test requirements, which can consist of well over 30 different automated code quality verifications. This ensures the code quality adheres to at least some basic standards. To go beyond this, we would like to build more code-quality compliance tools, for example an open-language tool that verifies the documentation is written with valid grammar. This does not imply that the documentation is of good quality, yet it does mean bounty hunters must put in effort to writing enough sensible documentation. Then it is still a gamble on whether it is applicable documentation or not.\nThis means that the TruCol protocol is particularly suited for difficult problems where the solution is more valuable than the explanation. Examples may be scheduling instances, algorithmic optimisations and even black-box machine-learning classifiers.\nOur core value is user freedom, an that goes both ways, so if you need regulatory compliance, or if you need to hire from certain positions, we would love to help you integrate these requirements into the smart-contract. For example, suppose you work at ESA, and would like to see some algorithmic optimisation, yet you are bound to hire x% of workers from country y. A solution could be to only accept solutions from bounty hunters that can prove they are from country y, using a self sovereign identity, such as provided by IRMA. We would like to go further with this, to ensure bounty hunters from all over the world automatically receive pensions and other digitally verifiable benefits. Please contact us if you are interested in collaborating on this topic.\nThis is a winner-take-all protocol, meaning the first person to submit a valid solution retrieves the full bounty. Employers have to specify an expiration date on their bounty, and the bounty contracts are immutable after deployment. That means you know before you start to work on a task, how much you earn, and your payout is direct. To verify your solution is valid, you can run the chain locally, and verify the smart contracts pay out, by simulating the test specs in a locally hosted CI.\nAbout\u00a0\u00a0\u00a0\u00a0 Contact\u00a0\u00a0\u00a0\u00a0 GitHub\u00a0\u00a0\u00a0\u00a0\n\u00a9 2023. A TruCol project. CC BY-SA 4.0.\n"
                }
            ]
        }
    }
}